name: Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

jobs:
  # Test before deployment
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run basic import tests
      run: |
        python -c "import src.config; print('‚úÖ Config import successful')"
        python -c "import src.persistent_mcp.server; print('‚úÖ Server import successful')"
        python -c "from src.persistent_mcp.tools import TechnicalIndicatorsTool, TradingJournalTool; print('‚úÖ Tools import successful')"
        
    - name: Validate configuration
      run: |
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'postgresql://test:test@localhost:5432/test'
        os.environ['SUPABASE_URL'] = 'https://test.supabase.co'
        os.environ['SUPABASE_ANON_KEY'] = 'test-key'
        os.environ['SUPABASE_SERVICE_ROLE_KEY'] = 'test-service-key'
        os.environ['JWT_SECRET_KEY'] = 'test-secret-key-32-characters-long'
        from src.config import get_settings
        settings = get_settings()
        print(f'‚úÖ Configuration validated: {settings.mcp_server_name}')
        "

  # Deploy to Render
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 'manual',
            state: 'in_progress',
            description: 'Deploying to Render...',
            environment: 'production'
          });
    
    - name: Deploy to Render
      run: |
        echo "üöÄ Triggering Render deployment..."
        
        # Method 1: Using Render API to trigger deployment
        if [ -n "$RENDER_API_KEY" ] && [ -n "$RENDER_SERVICE_ID" ]; then
          echo "Using Render API to trigger deployment"
          curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'
        else
          echo "‚ö†Ô∏è Render API credentials not configured"
          echo "Deployment will be triggered automatically by Render's GitHub integration"
        fi
        
    - name: Wait for deployment
      if: env.RENDER_API_KEY != '' && env.RENDER_SERVICE_ID != ''
      run: |
        echo "‚è≥ Waiting for Render deployment to complete..."
        sleep 30
        
        # Check deployment status
        for i in {1..12}; do
          echo "Checking deployment status (attempt $i/12)..."
          
          STATUS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID" | \
            jq -r '.service.serviceDetails.deployStatus // "unknown"')
            
          echo "Current deployment status: $STATUS"
          
          if [ "$STATUS" = "live" ]; then
            echo "‚úÖ Deployment completed successfully!"
            break
          elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "deploy_failed" ]; then
            echo "‚ùå Deployment failed with status: $STATUS"
            exit 1
          fi
          
          if [ $i -eq 12 ]; then
            echo "‚è∞ Deployment timeout - check Render dashboard manually"
            exit 1
          fi
          
          sleep 30
        done
        
    - name: Health check
      run: |
        echo "üè• Running post-deployment health check..."
        
        # Get service URL (you'll need to update this with your actual Render service URL)
        SERVICE_URL="https://fortunamind-persistent-mcp.onrender.com"
        
        # Wait for service to be ready
        sleep 15
        
        # Check health endpoint
        for i in {1..6}; do
          echo "Health check attempt $i/6..."
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health" || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Service is healthy!"
            curl -s "$SERVICE_URL/health" | jq '.'
            break
          else
            echo "‚ö†Ô∏è Health check failed with status $HTTP_STATUS"
            if [ $i -eq 6 ]; then
              echo "‚ùå Service failed health check"
              # Don't exit 1 here as the deployment might still be starting
            fi
            sleep 10
          fi
        done
        
    - name: Update deployment status - Success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 'manual',
            state: 'success',
            description: 'Successfully deployed to Render',
            environment_url: 'https://fortunamind-persistent-mcp.onrender.com',
            environment: 'production'
          });
          
    - name: Update deployment status - Failure  
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 'manual',
            state: 'failure',
            description: 'Deployment to Render failed',
            environment: 'production'
          });
          
    - name: Notify deployment
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Deployment completed successfully!"
          echo "üåê Service URL: https://fortunamind-persistent-mcp.onrender.com"
          echo "üíñ Health Check: https://fortunamind-persistent-mcp.onrender.com/health"
          echo "üìö API Docs: https://fortunamind-persistent-mcp.onrender.com/docs"
        else
          echo "‚ùå Deployment failed - check the logs above"
        fi

  # Staging deployment on feature branches (optional)
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöß Staging deployment for PR #${{ github.event.number }}"
        echo "This could deploy to a staging service on Render"
        echo "Configure RENDER_STAGING_SERVICE_ID for staging deployments"