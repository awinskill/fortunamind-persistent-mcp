name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_fortunamind_persistent
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false  # We use symlinks, not submodules
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libta-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Create framework symlink (mock for CI)
      run: |
        mkdir -p mock_framework/unified_tools
        mkdir -p mock_framework/core
        echo "# Mock framework for CI" > mock_framework/__init__.py
        echo "# Mock unified tools" > mock_framework/unified_tools/__init__.py
        echo "# Mock core" > mock_framework/core/__init__.py
        ln -s ../mock_framework src/framework
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        export TEST_DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_fortunamind_persistent"
        echo "TEST_DATABASE_URL=$TEST_DATABASE_URL" >> .env
    
    - name: Run security scans
      run: |
        echo "Running Bandit security scan..."
        bandit -r src/ -f json -o bandit-report.json || true
        echo "Running Safety check..."
        safety check --json --output safety-report.json || true
    
    - name: Run linting
      run: |
        echo "Running Black formatter check..."
        black --check src/ tests/
        echo "Running isort import sorting check..."
        isort --check-only src/ tests/
        echo "Running flake8 linting..."
        flake8 src/ tests/
    
    - name: Run type checking
      run: |
        echo "Running mypy type checking..."
        mypy src/ --ignore-missing-imports
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_fortunamind_persistent
      run: |
        echo "Running pytest with coverage..."
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json
          coverage.xml
          htmlcov/
    
    - name: Check test coverage threshold
      run: |
        echo "Checking coverage threshold..."
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
        COVERAGE_PERCENT=$(python -c "print(int(float('$COVERAGE') * 100))")
        echo "Current coverage: $COVERAGE_PERCENT%"
        if [ $COVERAGE_PERCENT -lt 80 ]; then
          echo "❌ Coverage $COVERAGE_PERCENT% is below required 80%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE_PERCENT% meets requirement"
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "✅ All tests passed! Ready for deployment."
    
    - name: Notify on failure
      if: needs.test.result == 'failure'
      run: |
        echo "❌ Tests failed. Please check the logs."
        exit 1